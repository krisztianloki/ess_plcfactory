PLC Factory
(c) European Spallation Source, Lund

Authors:
- Gregor Ulm: 2016-07-04 to 2016-09-02
- ...


Overview

PLC Factory is a Python script that automates some of the tasks associated with programming PLCs. Concretely, it creates templates with device information already filled in, which eliminate a large part of the possibly tedious work of programming PLCs.


Requirements:

 - Python 2.7
 - Python library 'requests' 2.10.0, provided in /libs

In addition, the user is required to have access to CCDB. Lastly, this application has been developed in  Apple OSX. It should run without modifications on any POSIX-compliant operating system, but may not work as intended, due to calls to the underlying operating system, on non-POSIX-compliant operating systems, which includes some Windows verions.


Files:

  - plcfactory.txt
  - plcfactory.py
  - restful.py
  - processTemplate.py


Usage:

  The invocation of the script follows the following pattern:
  
  python plcfactory.py <plc-name>
  
  For instance, "python plcfactory.py LNS-ISrc-01:Vac-IPC-1".
  
  As a result, a file of the format <plc-name>.txt is written to the directory plcfactory.py was called from. Note that certain characters in <plc-name> may get changed if they are not allwed in file names by the underlying operating system. For instance, on OSX, the colon (:) sign is turned into a slash (/).


Outline:

 PLC Factory performs the following steps, in order:
 
 1) Look up <plc-name> in CCDB
 
 2) Determine which devices X are controlled by <plc-name>
 
 3) initialise a set 'toProcess', populated with all devices that are controlled by <plc-name>
     while 'toProcess' is not empty:
        remove one element x,
        process template n of x, if available
        add devices controlled by x to 'toProcess', but only if they have not yet been processed
        remove x from toProcess

 4) Process header file associated with <plc-name>
  
 6) Process footer file associated with <plc-name>
 
 7) Write one output file, named <plc-name>.txt
 

 For further details, please consult the provided source code.


Features:
a) Custom file name

In order to create a custom filename for the output file, a header file needs to be provided. It has to contain, as the very first line, a definition of the desired name for the output file. The expected format is as follows:

#FILENAME INSTALLATION_SLOT-DEVICE_TYPE-TEMPLATE-TIMESTAMP.scl

#FILENAME [PLCF#INSTALLATION_SLOT]-[PLCF#TEMPLATE]-[PLCF#TIMESTAMP].scl


The definition needs to start with "#FILENAME". The following four keywords are implemented:


INSTALLATION_SLOT: installation slot taken from the invocation of plcfactory.py
DEVICE_TYPE:       retrieved from CCDB
TEMPLATE:          template number; taken from provided argument
TIMESTAMP:         date and time

In order to add further fields, modify the function definition of createFilename() in the file plcfactory.py.


You can chose any file extension you want, and even omit an extension altogether.


How to add new substitutions:


        # list of tuples of the form (tag, replacement)
        pairs = [ ('INSTALLATION_SLOT', device            )
                , ('TEMPLATE',         'template' + str(n))
                , ('TIMESTAMP',        timestamp          )
                , ('DEVICE_TYPE',      deviceType         )
                ]

        for (tag, replacement) in pairs:
            if tag in filename:
                filename = replaceTag(filename, tag, replacement)


from __future__ import division
from __future__ import absolute_import

""" Template Factory: EPICS printer """


__author__     = "Krisztian Loki"
__copyright__  = "Copyright 2017, European Spallation Source, Lund"
__license__    = "GPLv3"


import re

from . import PRINTER, TemplatePrinterException
from tf_ifdef import IfDefInternalError, SOURCE, VERBATIM, BLOCK, CMD_BLOCK, STATUS_BLOCK, BASE_TYPE, ANALOG_LIMIT



def printer():
    return [ (EPICS.name(), EPICS),
             (EPICS_TEST.name(), EPICS_TEST),
             (EPICS_OPC.name(), EPICS_OPC) ]




class EPICS_BASE(PRINTER):
    DISABLE_PV = "[PLCF#ROOT_INSTALLATION_SLOT]:PLCHashCorrectR"

    DISABLE_TEMPLATE = """
	field(DISS, "INVALID")
	field(DISV, "0")
	field(SDIS, "{DISABLE_PV}")"""

    INPV_TEMPLATE  = """record({recordtype}, "{pv_name}")
{{{alias}
	field(SCAN, "I/O Intr")
	field(DTYP, "{dtyp}")
	field({inp_out}){pv_extra}
}}

"""

    OUTPV_TEMPLATE = """record({recordtype}, "{pv_name}")
{{{alias}
	field(DTYP, "{dtyp}")
	field({inp_out}){pv_extra}
}}

"""

    TEST_INPV_TEMPLATE = """record({recordtype}, "{pv_name}")
{{{alias}
	field(SCAN, "Event")
	field(EVNT, "{dtyp}"){pv_extra}
}}

"""

    TEST_OUTPV_TEMPLATE = """record({recordtype}, "{pv_name}")
{{{alias}{pv_extra}
}}

"""

    PLC_INFO_FIELDS = """
	info("plc_datablock", "{plc_datablock}")
	info("plc_variable", "{plc_variable}")"""


    UPLOAD_PARAMS = "UploadParametersS"
    UPLOAD_STAT   = "UploadStatR"

    LNKx    = [ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' ]
    MAX_LNK = len(LNKx)


    def __init__(self, test = False):
        super(EPICS_BASE, self).__init__(comments = True, show_origin = True, preserve_empty_lines = True)
        self.DEFAULT_INDISABLE_TEMPLATE = self.DISABLE_TEMPLATE.format(DISABLE_PV = self.DISABLE_PV)
        self.INDISABLE_TEMPLATE = self.DISABLE_TEMPLATE
        self.OUTDISABLE_TEMPLATE = self.DISABLE_TEMPLATE.format(DISABLE_PV = self.DISABLE_PV)

        self._nonprop_re = re.compile('^([^:]*:[^:]*:)(.*)')
        self._validity_pvs = dict()
        self._validity_calc_names = dict()
        self._gen_validity_pvs = set()

        self._fo_name    = 'iUploadParamS{foc}-FO'
        self._params     = []
        self._last_param = None
        self._uploads    = []


    #
    # HEADER
    #
    def header(self, output, **keyword_params):
        super(EPICS_BASE, self).header(output, **keyword_params)

        epics_db_header = """
################################################################################
#
# This file was autogenerated by PLCFactory
# Please, DO NOT EDIT by hand!
#
#
# Branch of PLCFactory: {branch}
# Commit id of PLCFactory: {plcf_commit}
# Command line:
#
# {cmdline}
#
################################################################################

#
# This shows the module version that was 'required'
#
record(stringin, "{root_inst_slot}:ModVersionR")
{{
	field(DESC,	"Module version")
	field(DISP,	"1")
	field(VAL,	"$(MODVERSION=N/A)")
	field(PINI,	"YES")
}}

#
# This can be used to get the exact same version of PLCFactory that was used to generate this file
#
record(stringin, "{root_inst_slot}:PLCFCommitR")
{{
	field(DESC,	"Commit hash of PLCFactory")
	field(DISP,	"1")
#{plcf_commit}
	field(VAL,	"{plcf_commit_39}")
	field(PINI,	"YES")
	info("plcf_commit", "{plcf_commit}")
}}

#
# These are used in DOL links
#
record(bi, "{root_inst_slot}:iOne")
{{
	field(DESC,	"Constant 1")
	field(DISP,	"1")
	field(PINI,	"YES")
	field(VAL,	"1")
}}

record(longin, "{root_inst_slot}:iTwo")
{{
	field(DESC,	"Constant 2")
	field(DISP,	"1")
	field(PINI,	"YES")
	field(VAL,	"2")
}}
""".format(root_inst_slot  = self.root_inst_slot(),
           plcf_commit     = keyword_params.get("COMMIT_ID", "N/A"),
           plcf_commit_39  = keyword_params.get("COMMIT_ID", "N/A")[:39],
           branch          = self.plcf("ext.plcfactory_branch()"),
           cmdline         = self.plcf("ext.plcfactory_cmdline()"))

        self._append(epics_db_header, output)

        return self


    def comment(self):
        return "#"


    def inpv_template(self, test = False, sdis = False, VALIDITY_PV = None):
        """
            Called by STATUS_BLOCK.pv_template()
        """
        if sdis:
            if VALIDITY_PV is None:
                return self.DEFAULT_INDISABLE_TEMPLATE
            return self.INDISABLE_TEMPLATE.format(DISABLE_PV = VALIDITY_PV)
        if test:
            return self.TEST_INPV_TEMPLATE
        return self.INPV_TEMPLATE


    def outpv_template(self, test = False, sdis = False, VALIDITY_PV = None):
        """
            Called by CMD_BLOCK.pv_template() or PARAM_BLOCK.pv_template()
        """
        if sdis:
            return self.OUTDISABLE_TEMPLATE
        if test:
            return self.TEST_OUTPV_TEMPLATE
        return self.OUTPV_TEMPLATE


    def _body_register_block_printer(self, block):
        if block is None:
            return

        block.register_printer(self)


    def _body_block(self, block, output):
        if block.is_status_block():
            comment = "PLC   -> EPICS status  "
        elif block.is_cmd_block():
            comment = "EPICS -> PLC commands  "
        elif block.is_param_block():
            comment = "EPICS -> PLC parameters"
        else:
            raise IfDefInternalError("Unsupported block type: " + block.type())

        self._append((block.source(), """
##########
########## {inst_slot} {dir} ##########
##########
""".format(inst_slot = self.raw_inst_slot(),
           dir = comment)))


    def _body_var(self, var, output):
        self._append(self._toEPICS(var))

        if isinstance(var, ANALOG_LIMIT):
            self._set_alarm_limit(var, output)

        if not var.is_parameter():
            return

        self._params.append(var)

        # Have to resolve PLCF# expressions _now_ otherwise we'd end up with root_inst_slot in footer()
        self._last_param = (self.create_pv_name(self.inst_slot(self._if_def), var), self.expand(var.get_pv_field("FLNK")))


    def _body_source(self, var, output):
        self._append(var)


    def _body_end_param(self, if_def, output):
        if len(self._params) == 0:
            return

        self._uploads.append("{}:{}".format(self.inst_slot(if_def), self.UPLOAD_PARAMS))

        self._gen_param_fanouts(self._params, self.inst_slot(if_def), output)


    def _body_end(self, if_def, output):
        """
        Runs at the end of _ifdef_body()
        """
        for pv_cond in if_def.external_validity_pvs().items():
            self._gen_validity_calc(pv_cond, output)


    def _set_alarm_limit(self, var, output):
        limit = """
record(ao, "{ilimiter}")
{{
	field(DESC, "Set alarm limit value")
	field(DOL,  "{limiter} CP")
	field(OUT,  "{limited}.{field}")
	field(OMSL, "closed_loop"){disable_template}
}}
""".format(limiter   = self.create_pv_name(self.inst_slot(self._if_def), var),
           ilimiter  = self.create_pv_name(self.inst_slot(self._if_def), "i" + var.pv_name()),
           limited   = self.create_pv_name(self.inst_slot(self._if_def), var.limit_pv()),
           field     = var.limit_field(),
           disable_template = self.DEFAULT_INDISABLE_TEMPLATE)

        self._append(limit, output)


    def _get_validity_pv(self, var, output = None):
        """
        Return the name of the validity PV assigned to this PV or None if the default should be used
        As a side effect it generates the necessary helper PVs
        """
        validity_pv = self.expand(var.get_parameter("VALIDITY_PV", None))
        validity_condition = var.get_parameter("VALIDITY_CONDITION", None)

        exp_var_pv_name = self.create_pv_name(self.inst_slot(self._if_def), var)

        # If this is the PV that some other PVs validity is based on then generate a calcout PV
        # First check if the expanded PV name is already registered as a validity PV
        # we have to fall back to checking if this PV has a VALIDITY_CONDITION keyword because it might be assigned to other PVs we haven't seen yet
        # FIXME: This is not really optimal, since VALIDITY_CONDITION might be erroneously missing
        if exp_var_pv_name in self._validity_pvs or validity_condition is not None:
            self._gen_validity_calc(var, output)

            # Check (and ignore) if it depends on itself (happens when VALIDITY_PV is set with 'set_defaults()')
            # First check if VALIDITY_PV is specified without a prefix
            # fall back to checking if VALIDITY_PV was specified with a prefix
            if var.pv_name() == validity_pv or exp_var_pv_name == validity_pv:
                return None

        if validity_pv is None:
            return None

        # Check if name has the prefix by checking if it was already registered
        if validity_pv in self._validity_pvs:
            return self._validity_pvs[validity_pv]

        # Check if validity PV is defined in this interface definition file
        val_pv_var = self._if_def.has_pv(validity_pv, prefix = self.inst_slot(self._if_def) + ':')
        if val_pv_var is not None:
            # We have to expand the PV name
            validity_pv = self.create_pv_name(self.inst_slot(self._if_def), val_pv_var)

        validity_name = "{} MSS".format(self._gen_validity_name(validity_pv))
        self._validity_pvs[validity_pv] = validity_name

        return validity_name


    def _gen_validity_calc(self, var, output = None):
        """
        Generate the helper PVs for validity calculation
        """

        if output is None:
            output = self._output

        if not isinstance(var, tuple):
            # This is a class; i.e. a PLC variable
            vpv = self.create_pv_name(self.inst_slot(self._if_def), var)
            vcond = var.get_parameter("VALIDITY_CONDITION", None)
            if vcond is None:
                raise TemplatePrinterException("VALIDITY_CONDITION is not specified", IFDEF_SOURCE = var)
        else:
            # This is an external validity PV
            vpv = var[0]
            if vpv in self._gen_validity_pvs:
                return
            vcond = var[1]

        # Accept True/False in quotes
        if isinstance(vcond, str):
            if vcond.lower() == "true":
                vcond = True
            elif vcond.lower() == "false":
                vcond = False

        # Register the fact that this validity PV was taken care of
        self._gen_validity_pvs.add(vpv)
        helpernames = self._gen_validity_name(vpv, "vclc", "vinv", "vhsh")

        if vcond is True:
            vcond = "A"
        elif vcond is False:
            vcond = "!A"

        # Generate PV ("vclc") that calculates validity using the supplied condition expression
        self._append("""
record(calcout, "{vclc}")
{{
	field(DESC, "Calculate validity")
	field(INPA, "{vpv} CP")
	field(IVOA, "Set output to IVOV")
	field(CALC, "{vcond}")
	field(OUT,  "{vinv} PP")
}}
""".format(vclc  = helpernames[1],
           vpv   = vpv,
           vcond = vcond,
           vinv  = helpernames[2]), output)

        # Generate PV ("vinv") that becomes INVALID when "vclc" is False
        self._append("""
record(bi, "{vinv}")
{{
	field(DESC, "Becomes INVALID if zero")
	field(ZSV,  "INVALID")
	field(PINI, "YES")
	field(VAL,  "0")
	field(FLNK, "{vbi}.PROC CA")
}}
""".format(vinv = helpernames[2],
           vbi  = helpernames[0]), output)

        # Generate PV ("vhsh") that ensures that 'vbi' will be processed every time PLCHashCorrectR changes
        self._append("""
record(bi, "{vhsh}")
{{
	field(DESC, "Forward PLCHashCorrectR change to vbi")
	field(INP,  "{sdis} CP")
	field(FLNK, "{vbi}.PROC CA")
}}
""".format(vhsh = helpernames[3],
           sdis = self.DISABLE_PV,
           vbi  = helpernames[0]), output)

        # Generate PV ("vbi") that aggregates DISABLE_PV and "vinv"
        self._append("""
record(calc, "{vbi}")
{{
	field(DESC, "Aggregate PLCHashCorrectR and vinv")
	field(INPA, "{sdis}")
	field(INPB, "{vinv} MSS")
	field(CALC, "A")
}}
""".format(vbi  = helpernames[0],
           sdis = self.DISABLE_PV,
           vinv = helpernames[2]), output)


    def _gen_validity_name(self, name, *suffixes):
        """
        Generate validity helper PV names
        By default only the bi PV (that must be referenced in SDIS fields) is returned.
        If suffixes is specified then a list consisting of the bi and suffixes will be returned
        """
        try:
            return self._validity_calc_names[name]
        except KeyError:
            pass

        rematch = self._nonprop_re.match(name)
        try:
            ess_name = rematch.group(1)
        except AttributeError:
            raise TemplatePrinterException("Non ESS conformant device name: '{}'".format(name))
        prop = rematch.group(2)

        vbi = "{}i{}vbi".format(ess_name, prop)

        if len(suffixes) == 0:
            return vbi

        pvs = [ vbi ]
        pvs.extend(map(lambda s: "{}i{}{}".format(ess_name, prop, s), suffixes))

        return pvs


    def _gen_param_fanouts(self, param_list, inst_slot, output, footer = False):
        foc = 0
        lnk = 0

        for upload in param_list:
            if lnk == self.MAX_LNK:
                foc += 1
                self._append("""	field(FLNK, "{inst_slot}:{upload}")
}}
""".format(inst_slot = inst_slot,
           upload    = self._fo_name.format(foc = foc)), output)

                lnk = 0

            if lnk == 0:
                self._append("""record(fanout, "{inst_slot}:{upload}")
{{
""".format(inst_slot = inst_slot,
           upload    = self.UPLOAD_PARAMS if foc == 0 else self._fo_name.format(foc = foc)), output)

            self._append("""	field(LNK{lnk}, "{upload}")
""".format(lnk       = self.LNKx[lnk],
           upload    = upload if footer else "{}:{}".format(inst_slot, upload.pv_name())), output)

            lnk += 1

        if footer and foc == 0 and lnk == 0:
            # Create an empty UploadParamsS if there are no parameters
            epics_db_footer = """
record(fanout, "{inst_slot}:{upload}")
{{
""".format(inst_slot = inst_slot,
           upload    = self.UPLOAD_PARAMS)

            self._append(epics_db_footer, output)

        self._append("}", output)



    #
    # FOOTER
    #
    def footer(self, output, **keyword_params):
        super(EPICS_BASE, self).footer(output, **keyword_params)

        if not self._gen_validity_pvs == set(self._validity_pvs.keys()):
            raise TemplatePrinterException("The following validity PVs were not found or are missing VALIDITY_CONDITION:{}".format(set(self._validity_pvs.keys()) - self._gen_validity_pvs))

        self._gen_param_fanouts(self._uploads, self.root_inst_slot(), output, True)

        # Generate parameter uploading status monitoring
        self._append("""
record(bo, "{root_inst_slot}:iInitUploadStat")
{{
	field(DESC, "Initialize parameter uploading status")
	field(DOL,  "{root_inst_slot}:iOne")
	field(OMSL, "closed_loop")
	field(OUT,  "{root_inst_slot}:{upload_stat} PP")

}}

record(longout, "{root_inst_slot}:iDoneUploadStat")
{{
	field(DESC, "Done parameter uploading status")
	field(DOL,  "{root_inst_slot}:iTwo")
	field(OMSL, "closed_loop")
	field(OUT,  "{root_inst_slot}:{upload_stat} PP")

}}

record(mbbi, "{root_inst_slot}:{upload_stat}")
{{
	field(DESC, "Parameter uploading status")
	field(ZRVL, "0")
	field(ZRST, "Never uploaded")

	field(ONVL, "1")
	field(ONST, "Uploading...")

	field(TWVL, "2")
	field(TWST, "Uploaded")

	field(VAL,  "0")
	field(PINI, "YES")
}}

record(fanout, "{root_inst_slot}:{upload}")
{{
	field(LNK0, "{root_inst_slot}:iInitUploadStat")
	field(SHFT, "0")
""".format(root_inst_slot = self.root_inst_slot(),
           upload_stat    = self.UPLOAD_STAT,
           upload         = self.UPLOAD_PARAMS), output)

        if self._last_param:
            if self._last_param[1]:
                # Very last parameter has custom FLNK
                self._append("""}}
record(fanout, "{root_inst_slot}:iCustomFLNK")
{{
	field(LNK1, "{custom_flnk}")
	field(FLNK, "{root_inst_slot}:iDoneUploadStat")
}}

record("*", "{last_param}")
{{
	field(FLNK, "{root_inst_slot}:iCustomFLNK")
}}
""".format(root_inst_slot = self.root_inst_slot(),
           custom_flnk    = self._last_param[1],
           last_param     = self._last_param[0]), output)
            else:
                # No custom FLNK for very last parameter
                self._append("""}}

record("*", "{last_param}")
{{
	field(FLNK, "{root_inst_slot}:iDoneUploadStat")
}}""".format(root_inst_slot = self.root_inst_slot(),
             last_param     = self._last_param[0]), output)
        else:
            # No parameters, append LNK1 to root_inst_slot:UploadParametersS
            self._append("""
	field(LNK1, "{root_inst_slot}:iDoneUploadStat")
}}""".format(root_inst_slot = self.root_inst_slot()), output)




#
# EPICS output
#
class EPICS(EPICS_BASE):
    def __init__(self, test = False):
        super(EPICS, self).__init__(test)
        self._test   = test


    @staticmethod
    def name():
        return "EPICS-DB"


    def field_inp(self, inst_io, offset, dtyp_var_type, link_extra):
        """
            Called by STATUS_BLOCK.inp_out()
        """
        return '@{inst_io}/{offset} T={dtyp_var_type}{link_extra}'.format(inst_io       = inst_io,
                                                                          offset        = offset,
                                                                          dtyp_var_type = dtyp_var_type,
                                                                          link_extra    = link_extra)


    def field_out(self, inst_io, offset, dtyp_var_type, link_extra):
        """
            Called by COMMAND_BLOCK.inp_out() or PARAM_BLOCK.inp_out()
        """
        return '@{inst_io}($(PLCNAME)write, {offset}, {link_extra}){dtyp_var_type}'.format(inst_io       = inst_io,
                                                                                           offset        = offset,
                                                                                           dtyp_var_type = dtyp_var_type,
                                                                                           link_extra    = link_extra)


    def _toEPICS(self, var):
        pv_extra = var.pv_template(sdis = True, VALIDITY_PV = self._get_validity_pv(var)) + var.build_pv_extra() + EPICS_BASE.PLC_INFO_FIELDS.format(plc_datablock = self._if_def.DEFAULT_DATABLOCK_NAME,
                                                                                                           plc_variable  = var.name())
        if var.is_parameter() or self._test:
            pv_extra = pv_extra + """
	info(autosaveFields_pass0, "VAL")"""

        return (var.source(),
                var.pv_template(test = self._test).format(recordtype = var.pv_type(),
                                                          pv_name    = self.create_pv_name(self.inst_slot(self._if_def), var),
                                                          alias      = var._build_pv_alias(self.create_pv_name, self.inst_slot(self._if_def)),
                                                          dtyp       = var.dtyp(),
                                                          inp_out    = var.inp_out(inst_io       = var.inst_io(),
                                                                                   offset        = var.link_offset(),
                                                                                   dtyp_var_type = var.endian_correct_dtyp_var_type(),
                                                                                   link_extra    = var.link_extra() + var._get_user_link_extra()),
                                                          pv_extra   = pv_extra))


    #
    # HEADER
    #
    def header(self, output, **keyword_params):
        super(EPICS, self).header(output, **keyword_params).add_filename_header(output, extension = "db")
        epics_db_header = """

#########################################################
########## EPICS <-> PLC connection management ##########
#########################################################
record(asyn, "{root_inst_slot}:iAsyn")
{{
	field(DTYP,	"asynRecordDevice")
	field(PORT,	"$(PLCNAME)")
}}
record(bi, "{root_inst_slot}:ModbusConnectedR")
{{
	field(DESC,	"Shows if the MODBUS channel connected")
	field(INP,	"{root_inst_slot}:iAsyn.CNCT CP")
	field(ONAM,	"Connected")
	field(ZNAM,	"Disconnected")
	field(ZSV,      "MAJOR")
	field(FLNK,	"{root_inst_slot}:CommsHashToPLCS.PROC CA")
}}
record(bi, "{root_inst_slot}:S7ConnectedR")
{{
	field(DESC,	"Shows if the S7 channel is connected")
	field(SCAN,	"I/O Intr")
	field(DTYP,	"S7plc stat")
	field(INP,	"@$(PLCNAME)")
	field(ONAM,	"Connected")
	field(ZNAM,	"Disconnected")
	field(ZSV,      "MAJOR")
}}
record(stringin, "{root_inst_slot}:PLCAddr-RB")
{{
# We assume S7 and Modbus address are the same (as they should be)
	field(DESC,	"Address of the PLC")
}}
record(scalcout, "{root_inst_slot}:iPLCAddr-RB")
{{
	field(DESC,	"Strip port number of host:port")
	field(INAA,	"{root_inst_slot}:S7Addr-RB CP")
	field(CALC,	"AA[0,':']")
	field(OUT,	"{root_inst_slot}:PLCAddr-RB PP")
}}
record(stringout, "{root_inst_slot}:PLCAddrS")
{{
	field(DESC,	"Set the address of the PLC")
	field(FLNK,	"{root_inst_slot}:iSetPLCAddrS")
}}
record(fanout, "{root_inst_slot}:iSetPLCAddrS")
{{
	field(LNK1,	"{root_inst_slot}:iCalcS7AddrS")
	field(LNK2,	"{root_inst_slot}:iCalcModbusAddrS")
}}
record(scalcout, "{root_inst_slot}:iCalcS7AddrS")
{{
	field(DESC,	"Construct the S7 address")
	field(INAA,	"{root_inst_slot}:PLCAddrS")
	field(CALC,	"AA + ':' + '$(S7_PORT)'")
	field(OUT,	"{root_inst_slot}:iS7AddrS PP")
}}
record(scalcout, "{root_inst_slot}:iCalcModbusAddrS")
{{
	field(DESC,	"Construct the Modbus address")
	field(INAA,	"{root_inst_slot}:PLCAddrS")
	field(CALC,	"AA + ':' + '$(MODBUS_PORT)'")
	field(OUT,	"{root_inst_slot}:iAsyn.HOSTINFO PP")
}}
record(stringin, "{root_inst_slot}:ModbusAddr-RB")
{{
	field(DESC,	"Address of the PLC")
	field(INP,	"{root_inst_slot}:iAsyn.HOSTINFO CP")
}}
record(stringin, "{root_inst_slot}:S7Addr-RB")
{{
	field(DESC,	"Address of the PLC")
	field(INP,	"{root_inst_slot}:iS7AddrS CP")
}}
record(stringout, "{root_inst_slot}:iS7AddrS")
{{
	field(DESC,	"Set address of the PLC")
	field(DTYP,	"S7plc addr")
	field(OUT,	"@$(PLCNAME)")
	field(DISP,	"1")
}}
record(calcout, "{root_inst_slot}:iCalcConn")
{{
# Need to explicitly scan because using multiple CPs is not robust
	field(SCAN,	"1 second")
	field(INPA,	"{root_inst_slot}:S7ConnectedR CP")
	field(INPB,	"{root_inst_slot}:ModbusConnectedR CP")
	field(CALC,	"A && B")
	field(OUT,	"{root_inst_slot}:ConnectedR PP")
}}
record(bi, "{root_inst_slot}:ConnectedR")
{{
	field(DESC,	"Shows if the PLC is connected")
	field(ONAM,	"Connected")
	field(ZNAM,	"Disconnected")
	field(ZSV,      "MAJOR")
}}
record(bi, "{root_inst_slot}:PLCHashCorrectR")
{{
	field(DESC,	"Shows if the comms hash is correct")
	field(ONAM,	"Correct")
	field(ZNAM,	"Incorrect")
	field(ZSV,      "MAJOR")
}}
record(bi, "{root_inst_slot}:AliveR")
{{
	alias("{root_inst_slot}:CommsOK")
	field(DESC,	"Shows if the PLC is sending heartbeats")
	field(ONAM,	"Alive")
	field(ZNAM,	"Not responding")
	field(ZSV,      "MAJOR")
}}
record(calcout, "{root_inst_slot}:iCheckHash")
{{
	field(INPA,	"{root_inst_slot}:iCommsHashToPLC")
	field(INPB,	"{root_inst_slot}:iIsMBHash")
	field(INPC,	"{root_inst_slot}:iS7CommsHash")
	field(INPD,	"{root_inst_slot}:iMBCommsHash")
	field(INPE,	"{root_inst_slot}:iS7CommsHash.STAT")
	field(INPF,	"{root_inst_slot}:iMBCommsHash.STAT")
# if we have the HASH in the modbus map it should be the same as the one from the S7 stream
	field(CALC,	"A == C && (B ? C == D : 1) && E == 0 && F == 0")
	field(OOPT,	"On Change")
	field(OUT,	"{root_inst_slot}:PLCHashCorrectR PP")
}}
record(bo, "{root_inst_slot}:iGotHeartbeat")
{{
	field(DOL,	"{root_inst_slot}:iOne")
	field(OMSL,	"closed_loop")
	field(OUT,	"{root_inst_slot}:iKickAlive PP")
}}
record(bo, "{root_inst_slot}:iKickAlive")
{{
	field(HIGH,	"5")
	field(OUT,	"{root_inst_slot}:AliveR PP")
}}

########################################################
########## EPICS -> PLC comms management data ##########
########################################################
record(ao, "{root_inst_slot}:iCommsHashToPLC")
{{
	field(DESC,	"The comms hash to PLC")
	field(DISP,	"1")
	field(PINI,	"YES")
	field(VAL,	"#HASH")
}}
record(ao, "{root_inst_slot}:CommsHashToPLCS")
{{
	field(DESC,	"Sends comms hash to PLC")
	field(SCAN,	"1 second")
	field(DTYP,	"asynInt32")
	field(OUT,	"@asyn($(PLCNAME)write, [PLCF#EPICSToPLCDataBlockStartOffset], 100)INT32_[PLCF#'BE' if 'PLC-EPICS-COMMS:Endianness' == 'BigEndian' else 'LE']")
	field(OMSL,	"closed_loop")
	field(DOL,	"{root_inst_slot}:iCommsHashToPLC")
	field(DISV,	"0")
	field(SDIS,	"{root_inst_slot}:ModbusConnectedR")
}}
record(calc, "{root_inst_slot}:iHeartbeatToPLC")
{{
	field(SCAN,	"1 second")
	field(INPA,	"{root_inst_slot}:iHeartbeatToPLC.VAL")
	field(CALC,	"(A >= 32000)? 0 : A + 1")
	field(FLNK,	"{root_inst_slot}:HeartbeatToPLCS")
	field(DISV,	"0")
	field(SDIS,	"{root_inst_slot}:ModbusConnectedR")
}}
record(ao, "{root_inst_slot}:HeartbeatToPLCS")
{{
	field(DESC,	"Sends heartbeat to PLC")
	field(DTYP,	"asynInt32")
	field(OUT,	"@asyn($(PLCNAME)write, [PLCF#EPICSToPLCDataBlockStartOffset + 2], 100)")
	field(OMSL,	"closed_loop")
	field(DOL,	"{root_inst_slot}:iHeartbeatToPLC.VAL")
	field(OIF,	"Full")
	field(DRVL,	"0")
	field(DRVH,	"32000")
	field(DISV,	"0")
	field(SDIS,	"{root_inst_slot}:ModbusConnectedR")
}}

########################################################
########## PLC -> EPICS comms management data ##########
########################################################
# This iS7CommsHash/iMBCommsHash/iIsMBHash magic is needed because moving the HASH to the modbus map
#  does not change the HASH itself so the new SCL is not necessarily downloaded to the PLC
# AND making sure that iS7CommsHash == iMBCommsHash is a good check to make sure that the size of
#  the S7 stream is correctly set
record(ai, "{root_inst_slot}:iS7CommsHash")
{{
	field(DESC,	"Comms hash from PLC using S7 stream")
	field(SCAN,	"I/O Intr")
	field(DTYP,	"S7plc")
	field(INP,	"@$(PLCNAME)/[PLCF#PLCToEPICSDataBlockStartOffset] T=INT32")
	field(FLNK,	"{root_inst_slot}:CommsHashFromPLCR")
}}
record(ai, "{root_inst_slot}:iMBCommsHash")
{{
	field(DESC,	"Comms hash from PLC using MB map")
	field(SCAN,	"I/O Intr")
	field(DTYP,	"asynInt32")
	field(INP,	"@asyn($(PLCNAME)read, 3, 100)INT32_[PLCF#'BE' if 'PLC-EPICS-COMMS:Endianness' == 'BigEndian' else 'LE']")
	field(FLNK,	"{root_inst_slot}:iIsMBHash")
}}
record(calcout, "{root_inst_slot}:iIsMBHash")
{{
	field(INPA,	"{root_inst_slot}:iMBCommsHash")
	field(CALC,	"A != 0")
# Make sure to process it even if it is being processed right now
	field(OUT,	"{root_inst_slot}:CommsHashFromPLCR.PROC CA")
}}
record(sel, "{root_inst_slot}:CommsHashFromPLCR")
{{
	field(DESC,	"Comms hash from PLC")
	field(NVL,	"{root_inst_slot}:iIsMBHash")
	field(INPA,	"{root_inst_slot}:iS7CommsHash MSS")
	field(INPB,	"{root_inst_slot}:iMBCommsHash MSS")
	field(FLNK,	"{root_inst_slot}:iCheckHash")
}}
record(ai, "{root_inst_slot}:HeartbeatFromPLCR")
{{
	field(DESC,	"Heartbeat from PLC")
	field(SCAN,	"I/O Intr")
	field(DTYP,	"S7plc")
	field(INP,	"@$(PLCNAME)/[PLCF#(PLCToEPICSDataBlockStartOffset + 4)] T=INT16")
	field(FLNK,	"{root_inst_slot}:iGotHeartbeat")
	field(DISS,	"INVALID")
	field(DISV,	"0")
	field(SDIS,	"{root_inst_slot}:PLCHashCorrectR")
}}

#COUNTER {cmd_cnt} = [PLCF#{cmd_cnt} + 10];
#COUNTER {status_cnt} = [PLCF#{status_cnt} + 10];
""".format(root_inst_slot  = self.root_inst_slot(),
           cmd_cnt         = CMD_BLOCK.counter_keyword(),
           status_cnt      = STATUS_BLOCK.counter_keyword())

        self._append(epics_db_header, output)

        return self


    #
    # BODY
    #
    def _ifdef_body(self, if_def, output, **keyword_params):
        self._output = output

        self._body_register_block_printer(if_def._cmd_block())
        self._body_register_block_printer(if_def._param_block())
        self._body_register_block_printer(if_def._status_block())

        self._append("""
##########
########## {inst_slot} ##########
##########
""".format(inst_slot = self.raw_inst_slot()))
        self._body_verboseheader(if_def._cmd_block(), output)
        self._body_verboseheader(if_def._param_block(), output)
        self._body_verboseheader(if_def._status_block(), output)

        self._append("""##########

""")

        self._params = []
        for src in if_def.interfaces():
            if isinstance(src, BLOCK):
                self._body_block(src, output)
            elif isinstance(src, BASE_TYPE):
                self._body_var(src, output)
            elif isinstance(src, VERBATIM):
                self._append((src.source(), str(src)))
            elif isinstance(src, SOURCE):
                self._body_source(src, output)
            else:
                self._append(self._toEPICS(src))

        self._body_end_param(if_def, output)
        self._append("\n\n")
        self._body_end_cmd(if_def, output)
        self._body_end_status(if_def, output)

        self._body_end(if_def, output)


    def _body_end_cmd(self, if_def, output):
        self._body_end_block(CMD_BLOCK.counter_keyword(), if_def.to_plc_words_length(), output)


    def _body_end_status(self, if_def, output):
        self._body_end_block(STATUS_BLOCK.counter_keyword(), if_def.from_plc_words_length(), output)


    def _body_end_block(self, counter_keyword, plc_db_length, output):
        if self._test:
            return

        counter_template = "#COUNTER {counter} = [PLCF# {counter} + {plc_db_length}]\n"

        self._append(counter_template.format(counter = counter_keyword, plc_db_length = plc_db_length))


    def _body_verboseheader(self, block, output):
        if block is None or self._test:
            return

        self._append("########## {keyword}: {length}\n".format(keyword = block.length_keyword(), length = block.length() // 2))




class EPICS_TEST(EPICS):
    def __init__(self):
        super(EPICS_TEST, self).__init__(test = True)


    @staticmethod
    def name():
        return "EPICS-TEST-DB"


    #
    # HEADER
    #
    def header(self, output, **keyword_params):
        #Have to call EPICS_BASE.header explicitly; we don't want EPICS.header
        EPICS_BASE.header(self, output, **keyword_params).add_filename_header(output, extension = "db")
        epics_db_header = """

#########################################################
########## EPICS <-> PLC connection management ##########
#########################################################
record(bi, "{root_inst_slot}:ModbusConnectedR")
{{
	field(DESC,	"Shows if the MODBUS channel connected")
	field(ONAM,	"Connected")
	field(ZNAM,	"Disconnected")
	field(ZSV,      "MAJOR")
	field(VAL,	"1")
	field(PINI,	"YES")
	field(FLNK,	"{root_inst_slot}:CommsHashToPLCS")
}}
record(bi, "{root_inst_slot}:S7ConnectedR")
{{
	field(DESC,	"Shows if the S7 channel is connected")
	field(ONAM,	"Connected")
	field(ZNAM,	"Disconnected")
	field(ZSV,      "MAJOR")
	field(VAL,	"1")
	field(PINI,	"YES")
}}
record(calcout, "{root_inst_slot}:iCalcConn")
{{
# Need to explicitly scan because using multiple CPs is not robust
	field(SCAN,	"1 second")
	field(INPA,	"{root_inst_slot}:S7ConnectedR CP")
	field(INPB,	"{root_inst_slot}:ModbusConnectedR CP")
	field(CALC,	"A && B")
	field(OUT,	"{root_inst_slot}:ConnectedR PP")
}}
record(bi, "{root_inst_slot}:ConnectedR")
{{
	field(DESC,	"Shows if the PLC is connected")
	field(ONAM,	"Connected")
	field(ZNAM,	"Disconnected")
	field(ZSV,      "MAJOR")
}}
record(event, "{root_inst_slot}:iEvent")
{{
	field(DESC,	"Generate S7plc event")
	field(SCAN,	".2 second")
	field(VAL,	"S7plc")
	field(DISV,	"0")
	field(SDIS,	"{root_inst_slot}:S7ConnectedR")
}}
record(bi, "{root_inst_slot}:PLCHashCorrectR")
{{
	field(DESC,	"Shows if the comms hash is correct")
	field(ONAM,	"Correct")
	field(ZNAM,	"Incorrect")
	field(ZSV,      "MAJOR")
}}
record(bi, "{root_inst_slot}:AliveR")
{{
	alias("{root_inst_slot}:CommsOK")
	field(DESC,	"Shows if the PLC is sending heartbeats")
	field(ONAM,	"Alive")
	field(ZNAM,	"Not responding")
	field(ZSV,      "MAJOR")
}}
record(calcout, "{root_inst_slot}:iCheckHash")
{{
	field(INPA,	"{root_inst_slot}:iCommsHashToPLC")
	field(INPB,	"{root_inst_slot}:CommsHashFromPLCR")
	field(INPC,	"{root_inst_slot}:CommsHashFromPLCR.STAT")
	field(CALC,	"A == B && C == 0")
	field(OOPT,	"On Change")
	field(OUT,	"{root_inst_slot}:PLCHashCorrectR PP")
}}
record(bo, "{root_inst_slot}:iGotHeartbeat")
{{
	field(DOL,	"{root_inst_slot}:iOne")
	field(OMSL,	"closed_loop")
	field(OUT,	"{root_inst_slot}:iKickAlive PP")
}}
record(bo, "{root_inst_slot}:iKickAlive")
{{
	field(HIGH,	"5")
	field(OUT,	"{root_inst_slot}:AliveR PP")
}}

########################################################
########## EPICS -> PLC comms management data ##########
########################################################
record(ao, "{root_inst_slot}:iCommsHashToPLC")
{{
	field(DISP,	"1")
	field(PINI,	"YES")
	field(VAL,	"#HASH")
}}
record(ao, "{root_inst_slot}:CommsHashToPLCS")
{{
	field(DESC,	"Sends comms hash to PLC")
	field(OMSL,	"closed_loop")
	field(DOL,	"{root_inst_slot}:iCommsHashToPLC")
	field(DISV,	"0")
	field(SDIS,	"{root_inst_slot}:ConnectedR")
}}
record(calc, "{root_inst_slot}:iHeartbeatToPLC")
{{
	field(SCAN,	"1 second")
	field(INPA,	"{root_inst_slot}:iHeartbeatToPLC.VAL")
	field(CALC,	"(A >= 32000)? 0 : A + 1")
	field(FLNK,	"{root_inst_slot}:HeartbeatToPLCS")
	field(DISV,	"0")
	field(SDIS,	"{root_inst_slot}:ConnectedR")
}}
record(ao, "{root_inst_slot}:HeartbeatToPLCS")
{{
	field(DESC,	"Sends heartbeat to PLC")
	field(OMSL,	"closed_loop")
	field(DOL,	"{root_inst_slot}:iHeartbeatToPLC.VAL")
	field(OIF,	"Full")
	field(DRVL,	"0")
	field(DRVH,	"32000")
}}

########################################################
########## PLC -> EPICS comms management data ##########
########################################################
record(ai, "{root_inst_slot}:CommsHashFromPLCR")
{{
	field(DESC,	"Comms hash from PLC")
	field(SCAN,	"1 second")
	field(PINI,	"YES")
	field(VAL,	"#HASH")
	field(FLNK,	"{root_inst_slot}:iCheckHash")
}}
record(ai, "{root_inst_slot}:HeartbeatFromPLCR")
{{
	field(DESC,	"Heartbeat from PLC")
	field(INP,	"{root_inst_slot}:iHeartbeatToPLC.VAL CP")
	field(FLNK,	"{root_inst_slot}:iGotHeartbeat")
}}

########################################################
################# Test management data #################
########################################################
record(ao, "{root_inst_slot}:FixHashS")
{{
	field(DESC,	"Make HASH correct")
	field(OMSL,	"closed_loop")
	field(DOL,	"{root_inst_slot}:iCommsHashToPLC")
	field(OUT,	"{root_inst_slot}:CommsHashFromPLCR PP")
}}

record(bo, "{root_inst_slot}:RuinHashS")
{{
	field(DESC,	"Make HASH incorrect")
	field(FLNK,	"{root_inst_slot}:iRuinHash")
}}
record(calcout, "{root_inst_slot}:iRuinHash")
{{
	field(DESC,	"Make HASH incorrect")
	field(INPA,	"{root_inst_slot}:iCommsHashToPLC")
	field(CALC,	"A * -1")
	field(OUT,	"{root_inst_slot}:CommsHashFromPLCR PP")
}}
""".format(root_inst_slot = self.root_inst_slot())

        self._append(epics_db_header, output)
        return self



#
# OPC-UA EPICS output
#
class EPICS_OPC(EPICS_BASE):
    def __init__(self):
        super(EPICS_OPC, self).__init__()
        self.DISABLE_TEMPLATE = EPICS_OPC.DISABLE_TEMPLATE.format(DISABLE_PV = self.DISABLE_PV)


    @staticmethod
    def name():
        return "EPICS-OPC-DB"


    def field_inp(self, inst_io, datablock, var_name, **keyword_params):
        return '@{inst_io} ns=3;s=\\"{datablock}\\".\\"{var_name}\\"'.format(inst_io    = inst_io,
                                                                             datablock  = datablock,
                                                                             var_name   = var_name)


    def field_out(self, inst_io, datablock, var_name, monitor = " monitor=n"):
        return '@{inst_io} ns=3;s=\\"{datablock}\\".\\"{var_name}\\"{monitor}'.format(inst_io    = inst_io,
                                                                                      datablock  = datablock,
                                                                                      var_name   = var_name,
                                                                                      monitor    = monitor)


    def _toEPICS(self, var):
        pv_extra = self.DISABLE_TEMPLATE + var.build_pv_extra() + EPICS_BASE.PLC_INFO_FIELDS.format(plc_datablock = var.datablock_name(),
                                                                                                    plc_variable  = var.name())
        return (var.source(),
                var.pv_template().format(recordtype = var.pv_type(),
                                         pv_name    = self.create_pv_name(self.inst_slot(self._if_def), var),
                                         alias      = var._build_pv_alias(self.create_pv_name, self.inst_slot(self._if_def)),
                                         dtyp       = "OPCUA",
                                         inp_out    = var.inp_out(inst_io   = '$(SUBSCRIPTION)',
                                                                  datablock = var.datablock_name(),
                                                                  var_name  = var.name()),
                                         pv_extra   = pv_extra))


    #
    # HEADER
    #
    def header(self, output, **keyword_params):
        PRINTER.header(self, output, **keyword_params).add_filename_header(output, extension = "db")
        epics_db_header = """
record(stringin, "{root_inst_slot}:ModVersionR")
{{
	field(DISP,	"1")
	field(VAL,	"$(MODVERSION=N/A)")
	field(PINI,	"YES")
}}

record(stringin, "{root_inst_slot}:PLCFCommitR")
{{
	field(DISP,	"1")
#{plcf_commit}
	field(VAL,	"{plcf_commit_39}")
	field(PINI,	"YES")
	info("plcf_commit", "{plcf_commit}")
}}

record(mbbi, "{root_inst_slot}:OPCStateR")
{{
	field(DTYP, "OPCUA")
	field(INP, "@$(SUBSCRIPTION) i=2259")
	field(ZRST, "Running")
	field(ONST, "Failed")
	field(TWST, "NoConfiguration")
	field(THST, "Suspended")
	field(FRST, "Shutdown")
	field(FVST, "Test")
	field(SXST, "CommunicationFault")
	field(SVST, "Unknown")
}}

record(ao, "{root_inst_slot}:iCommsHashToPLC")
{{
	field(DISP,	"1")
	field(PINI,	"YES")
	field(VAL,	"#HASH")
}}
record(ao, "{root_inst_slot}:CommsHashToPLCS")
{{
	field(DESC,	"Sends comms hash to PLC")
#	field(SCAN,	"1 second")
	field(OMSL,	"closed_loop")
	field(DOL,	"{root_inst_slot}:iCommsHashToPLC")
}}
""".format(root_inst_slot  = self.root_inst_slot(),
           plcf_commit     = keyword_params.get("COMMIT_ID", "N/A"),
           plcf_commit_39  = keyword_params.get("COMMIT_ID", "N/A")[:39])

        self._append(epics_db_header, output)
        return self


    #
    # BODY
    #
    def _ifdef_body(self, if_def, output, **keyword_params):
        self._output = output

        self._body_register_block_printer(if_def._cmd_block())
        self._body_register_block_printer(if_def._param_block())
        self._body_register_block_printer(if_def._status_block())

        self._append("""
##########
########## {inst_slot} ##########
##########

""".format(inst_slot = self.raw_inst_slot()))

        self._params = []
        for src in if_def.interfaces():
            if isinstance(src, BLOCK):
                self._body_block(src, output)
            elif isinstance(src, BASE_TYPE):
                self._body_var(src, output)
            elif isinstance(src, VERBATIM):
                self._append((src.source(), str(src)))
            elif isinstance(src, SOURCE):
                self._body_source(src, output)
            else:
                self._append(self._toEPICS(src))

        self._body_end_param(if_def, output)
        self._append("\n\n")

from __future__ import absolute_import

""" Template Factory: readme printer """


__author__     = "Krisztian Loki"
__copyright__  = "Copyright 2020, European Spallation Source, Lund"
__license__    = "GPLv3"



from . import PRINTER
from os.path import basename



def printer():
    return (README.name(), README)



class README(PRINTER):
    def __init__(self):
        super(README, self).__init__()


    @staticmethod
    def name():
        return "README"


    @staticmethod
    def toanchor(text):
        return text.lower().replace(' ', '-').translate(None, '|.():')


    def tourl(self, text, link):
        if link is None:
            return text

        return "[{text}]({link})".format(text = text, link = self._helpers.url_strip_user(link))


    def artifact_details(self, artifact, output):
        self._append("""| Infor           | mation |
| ---             | --- |
| {epi}           | {epi_url} |
| Filename        | {filename} |
| Version         | {version} |
| Downloaded from | {url} |
| Local copy      | {saved_as} |
""".format(epi      = "CCDB Artifact" if artifact.epi() is None else artifact.epi(),
           epi_url  = artifact.filename() if artifact.epi_url() is None else artifact.epi_url(),
           filename = artifact.filename(),
           version  = "CCDB" if artifact.epi_version() is None else artifact.epi_version(),
           url      = artifact.url(),
           saved_as = self.tourl(basename(artifact.saved_as()), "misc/ccdb/{fname}".format(fname = artifact.saved_as()))), output)




    #
    # HEADER
    #
    def header(self, output, **keyword_params):
        super(README, self).header(output, **keyword_params).add_filename_header(output, extension = "md")

        self._device_types = []

        # The traling spaces after the backslash is intentional, it is part of the formatting!
        self._append("""# PLCFactory summary for {root}

**This module was generated by {plcf_url}**\\
**PLEASE DO NOT EDIT BY HAND**

## Runtime details

Branch of PLCFactory: `{branch}`\\
Commit id of PLCFactory: ```{commit}```\\
Command line:
```
{cmdline}
```

""".format(root = keyword_params["ROOT_INSTALLATION_SLOT"],
           plcf_url = self.tourl("PLCFactory", self.plcf("ext.plcfactory_origin()")),
           branch   = self.plcf("ext.plcfactory_branch()"),
           commit   = self.plcf("ext.plcfactory_commit_id()"),
           cmdline  = self.plcf("ext.plcfactory_cmdline()")), output)

        def formatter(item, item_type):
            if item_type == 'root':
                self._append("### {name_url} controls:".format(name_url = self.tourl(item.name(), item.url())), output)
            elif item_type == 'device_type':
                self._append("- Device type {type_url}".format(type_url = self.tourl(item.name(), item.url())), output)
            elif item_type == 'device':
                self._append("  - {name_url}".format(name_url = self.tourl(item.name(), item.url())), output)
            else:
                raise RuntimeError("Unknown item to format: " + item_type)

        self._append("""## Configuration details
""", output)
        self._root_device.buildControlsList(include_self = True, verbose = formatter)
        self._append("""
""", output)


    #
    # BODY
    #
    def _ifdef_body(self, if_def, output, **keyword_params):
        deviceType = self._device.deviceType()
        if deviceType in self._device_types:
            return

        self._device_types.append(deviceType)
        self._append("""### Device Type {typ}

""".format(typ = deviceType), output)
        self.artifact_details(if_def._artifact, output)
        self._append("""

""", output)


    def _any_body(self, output, **keyword_params):
        pass


    #
    # FOOTER
    #
    def footer(self, output, **keyword_params):
        super(README, self).footer(output, **keyword_params)
